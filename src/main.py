"""
Create a Python script that can run on Windows, Linux, and Mac that will:

1. Create a text file containing Hello
    (file path should be command line argument)
2. Ping and request.get an IP (should be command line argument)
3. Run test.bat on Windows or test.sh on Linux/Mac
Other requirements:
1. Include logging
2.use Object Oriented programming if possible
3 use TDD
4 short documentation /if possible autogenerated
    /7. Short documentation (autogenerated)
"""

import ipaddress
import platform
import sys
from argparse import ArgumentParser
from ipaddress import IPv4Address, IPv6Address
from typing import Union

try:
    from src.logger import logger
except ImportError:
    from logger import logger
try:
    from src.vmware_task import (LinuxMacImplementation, VmwareTask,
                                 WindowsImplementation, run_tasks)
except ImportError:
    from vmware_task import (LinuxMacImplementation, VmwareTask,
                             WindowsImplementation, run_tasks)


def parse_arguments(argv=None):
    """
    Handles arguments, assuming that the user has to enter the three arguments
    """
    parser = ArgumentParser()
    parser.add_argument(
        "-p", "--path", help="Path where the file will be created", type=str
    )
    parser.add_argument("-i", "--ip", help="IP to be pinged", type=str)
    parser.add_argument("-f", "--file", help="File to be executed", type=str)
    logger.info(len(sys.argv))
    try:
        args = parser.parse_args(argv)
    except Exception as e:
        logger.error(e)
        return False, False, False
    if not args.path or not args.ip or not args.file:
        parser.print_help()
        logger.error("Please provide correct arguments")
        raise ValueError("Argument error")
    logger.info(f"Path for the file: {args.path}")
    logger.info(f"IP: {args.ip}")
    return args.path, args.ip, args.file


def set_logger():
    """
    Initialization of Logger
    Basic initialization for the example
    """
    logger.start("INFO")
    logger.info("Starting execution...")


def find_os():
    """
    Identifies the OS and returns a specialized function
    """
    os_implementation = {
        "windows": WindowsImplementation(),
        "linux": LinuxMacImplementation(),
        "darwin": LinuxMacImplementation(),
    }
    # Validate OS
    which_system = platform.system().lower()
    if which_system not in os_implementation:
        raise OSError("Unknown OS")
    logger.info(f"OS is {which_system}")
    return os_implementation[which_system]


def validated_ip(ip: str) -> Union[IPv4Address, IPv6Address]:
    """
    Validates IP using the library ipaddress
    """
    try:
        valid_ip = ipaddress.ip_address(ip)
        return valid_ip
    except ValueError:
        raise ValueError("Please provide a valid IP address")


def main(argv=None):
    """
    Initializes logger
    Parse arguments
    Makes an instance of the functions depending on the OS
    Perform the tasks for the specific OS
    """
    set_logger()
    file_path, ip_arg, file_name = parse_arguments(argv)
    if any([file_path, ip_arg, file_name]) is None:
        logger.error("Argument error")
        raise SyntaxError("Argument error")
    implementation = find_os()
    specific_tasks = VmwareTask(implementation)
    result = run_tasks(specific_tasks, file_path, validated_ip(ip_arg), file_name)
    if not result:
        logger.error("Errors encountered")
    else:
        logger.info("All tasks succeeded")
    logger.info("Ending execution")
    logger.stop()
    return result


if __name__ == "__main__":
    main()
